#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""Lytro Power Tools - lfptool script"""

# <copyright>
# Copyright (c) 2011-2015 Lytro, Inc. All rights reserved.
# This software is the confidential and proprietary information of Lytro, Inc.
# You shall not disclose such confidential information and shall use it only in
# accordance with the license granted to you by Lytro, Inc.

# EXCEPT AS EXPRESSLY SET FORTH IN A WRITTEN LICENSE AGREEMENT WITH LICENSEE,
# LYTRO, INC. MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF
# THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR
# NON-INFRINGEMENT. LYTRO, INC. SHALL NOT BE LIABLE FOR ANY DAMAGES SUFFERED BY
# LICENSEE AS A RESULT OF USING, COPYING, MODIFYING OR DISTRIBUTING THIS
# SOFTWARE OR ITS DERIVATIVES.
# </copyright>


import textwrap

try:
    import lpt
except ImportError:
    import os
    import sys

    mod_dir = os.path.dirname(os.path.realpath(__file__))
    lpt_dir = os.path.abspath(os.path.join(mod_dir, '../..'))
    sys.path.insert(0, lpt_dir)
    import lpt

from lpt.lfp import config
from lpt.lfp.argparser import ArgParser
from lpt.lfp.cmds import Cmds
from lpt.lfp.tnt import Tnt
from lpt.utils.argutils import ArgumentParser
from lpt.utils.argutils import ArgUtils
from lpt.utils.utils import Utils

__prog__ = 'lfptool'
__version__ = '1.3.1'

tnt = Tnt()
cmds = Cmds()
utils = Utils()
argutils = ArgUtils()
arg_parser = ArgParser()


def build():
    """build function and arguments for LFP Tool"""

    epilog = "Lytro Power Tools - LightField {} Tool"
    desc = ("process, import, export and metadata operations "
            "for LFP files generated by Lytro cameras")

    parser = ArgumentParser(
        prog=__prog__,
        epilog=epilog.format('Processing'),
        usage=__prog__ + ' ... ',
        description=desc,
        formatter_class=argutils.formatter_class())

    subparsers = parser.add_subparsers(
        title=__prog__ + " commands",
        description="see help on individual sub commands for details")

    db = config.db

    raw_desc = textwrap.dedent('''

        current defaults:
        -----------------
        stored in {config_path}:
            * --calibration-in : {calib}

            * controlled with --imagerep
            --eslf-out  image: {img_esl}
            --image-out image: {img_img}
            --lfp-out   image: {img_lfp}
            --unpack    image: {img_unp}
            --depth-out image: {img_dep}

            * controlled with --depthrep
            --depth-out depth: {dep_img}
            --lfp-out   depth: {dep_lfp}
            --unpack    depth: {dep_unp}
            '''.format(config_path=config.powertools_cfg,
                       calib=db['calibration_in'],
                       img_esl=db['imagerep_raw_eslf_out'],
                       img_img=db['imagerep_raw_image_out'],
                       img_lfp=db['imagerep_raw_lfp_out'],
                       img_unp=db['imagerep_raw_unpack'],
                       img_dep=db['imagerep_raw_depth_out'],
                       dep_img=db['depthrep_raw_depth_out'],
                       dep_lfp=db['depthrep_raw_lfp_out'],
                       dep_unp=db['depthrep_raw_unpack']))

    batch_desc = textwrap.dedent('''''')
    warp_desc = textwrap.dedent('''
        current defaults:
        -----------------
        stored in {config_path}:

            * controlled with --imagerep
            --pack      image: {img_pack}
            --unpack    image: {img_unpa}

            * controlled with --depthrep
            --pack      depth: {dep_pack}
            --unpack    depth: {dep_unpa}
            '''.format(config_path=config.powertools_cfg,
                       img_pack=db['imagerep_warp_pack'],
                       img_unpa=db['imagerep_warp_unpack'],
                       dep_pack=db['depthrep_warp_pack'],
                       dep_unpa=db['depthrep_warp_unpack']))

    info_desc = textwrap.dedent('''
        view, write, query, and validate metadata from an individual LFP file,
        a list of LFP files, or a directory containing LFP files''')
    four_d_desc = "calculate 4d coordinates (x, y, u, v) for eslf image"

    raw = subparsers.add_parser(
        'raw',
        help="raw LFP file operations",
        formatter_class=argutils.formatter_class(m=48),
        epilog=epilog.format('Raw Processing'),
        description=raw_desc)

    batch = subparsers.add_parser(
        'batch',
        help="batch raw LFP file image processing",
        formatter_class=argutils.formatter_class(m=48),
        epilog=epilog.format('Batch Image Processing'),
        conflict_handler='resolve',
        description=batch_desc)

    warp = subparsers.add_parser(
        'warp',
        help="warp LFP file and unpacked warp LFP asset operations",
        formatter_class=argutils.formatter_class(m=48),
        epilog=epilog.format('Warp Processing'),
        description=warp_desc)

    four_d = subparsers.add_parser(
        '4d-coord',
        help="calculate 4d coordinates",
        formatter_class=argutils.formatter_class(m=48),
        epilog=epilog.format('4d-Coordinate Calculation'),
        description=four_d_desc)

    info = subparsers.add_parser(
        'info',
        help="view or query for LFP metadata information",
        description=info_desc,
        formatter_class=argutils.formatter_class(m=48),
        epilog=epilog.format('Info'))

    parser.args_meta(dflt_verbose=config.db['verbose'])
    arg_parser.arg_src(info)
    arg_parser.arg_src(warp)
    raw_in = arg_parser.arg_src(raw)
    batch_in = arg_parser.arg_src(batch)

    arg_parser.builder(batch, input_args=batch_in, mode='batch')
    arg_parser.builder(raw, input_args=raw_in, mode='raw', add_actions=True)
    arg_parser.builder(warp, mode='warp', add_actions=True)

    arg_parser.args_info(info)
    arg_parser.args_four_d(four_d)
    arg_parser.args_batch(batch)

    arg_parser.arg_multiprocessing(raw)
    arg_parser.arg_multiprocessing(batch)
    arg_parser.arg_multiprocessing(warp)
    arg_parser.arg_multiprocessing(info)

    raw.set_defaults(
        func=cmds.raw,
        print_help=raw.print_help,
        raw_action='unpack')

    info.set_defaults(
        func=cmds.info,
        print_help=info.print_help)

    warp.set_defaults(
        func=cmds.warp,
        warp_action='pack',
        print_help=warp.print_help)

    four_d.set_defaults(
        func=cmds.four_d,
        print_help=four_d.print_help)

    batch.set_defaults(
        func=cmds.batch,
        print_help=batch.print_help)

    args = parser.parse_args()
    cmds.debug = args.debug
    cmds.verbose = args.verbose
    args.func(args)


if __name__ == '__main__':
    build()
